import {
  VBtn
} from "./chunk-FWOABQ5J.js";
import "./chunk-YIOJAQDA.js";
import "./chunk-H7NMGLAT.js";
import "./chunk-PHTZPXFA.js";
import {
  makeDensityProps,
  useDensity
} from "./chunk-V46CE4HS.js";
import {
  VIcon
} from "./chunk-KC5BBGJ4.js";
import "./chunk-6HOBOJMU.js";
import {
  genOverlays,
  makeVariantProps,
  useVariant
} from "./chunk-P6TQGEIZ.js";
import {
  VDefaultsProvider
} from "./chunk-QH3VFEZC.js";
import {
  makeLocationProps,
  makePositionProps,
  useLocation,
  usePosition
} from "./chunk-6YGB5EOZ.js";
import {
  makeElevationProps,
  useElevation
} from "./chunk-M6VC5FQ7.js";
import {
  makeRoundedProps,
  useRounded
} from "./chunk-GI36WKPS.js";
import {
  useTextColor
} from "./chunk-GQKUYPUB.js";
import {
  makeDimensionProps,
  useDimension
} from "./chunk-Y54VH4DR.js";
import {
  IconValue
} from "./chunk-OGBPR4FW.js";
import {
  useLocale
} from "./chunk-LHCR7ZKX.js";
import {
  useProxiedModel
} from "./chunk-LJCPQVVR.js";
import {
  makeThemeProps,
  provideTheme
} from "./chunk-HG3HVBE7.js";
import {
  makeTagProps
} from "./chunk-DC55ZVOQ.js";
import "./chunk-C42CFLUZ.js";
import {
  createSimpleFunctional,
  defineComponent
} from "./chunk-QOJEC3X6.js";
import {
  computed,
  createVNode,
  toRef
} from "./chunk-QO6ZHO7P.js";
import "./chunk-RSJERJUL.js";

// node_modules/vuetify/lib/components/VAlert/VAlert.mjs
import "C:/Users/Rhyzen/Documents/GitHub/ClassroomReservation/client/node_modules/vuetify/lib/components/VAlert/VAlert.css";

// node_modules/vuetify/lib/components/VAlert/VAlertTitle.mjs
var VAlertTitle = createSimpleFunctional("v-alert-title");

// node_modules/vuetify/lib/components/VAlert/VAlert.mjs
var allowedTypes = ["success", "info", "warning", "error"];
var VAlert = defineComponent({
  name: "VAlert",
  props: {
    border: {
      type: [Boolean, String],
      validator: (val) => {
        return typeof val === "boolean" || ["top", "end", "bottom", "start"].includes(val);
      }
    },
    borderColor: String,
    closable: Boolean,
    closeIcon: {
      type: IconValue,
      default: "$close"
    },
    closeLabel: {
      type: String,
      default: "$vuetify.close"
    },
    icon: {
      type: [Boolean, String, Function, Object],
      default: null
    },
    modelValue: {
      type: Boolean,
      default: true
    },
    prominent: Boolean,
    title: String,
    text: String,
    type: {
      type: String,
      validator: (val) => allowedTypes.includes(val)
    },
    ...makeDensityProps(),
    ...makeDimensionProps(),
    ...makeElevationProps(),
    ...makeLocationProps(),
    ...makePositionProps(),
    ...makeRoundedProps(),
    ...makeTagProps(),
    ...makeThemeProps(),
    ...makeVariantProps({
      variant: "flat"
    })
  },
  emits: {
    "update:modelValue": (value) => true
  },
  setup(props, _ref) {
    let {
      slots
    } = _ref;
    const isActive = useProxiedModel(props, "modelValue");
    const icon = computed(() => {
      var _a;
      if (props.icon === false)
        return void 0;
      if (!props.type)
        return props.icon;
      return (_a = props.icon) != null ? _a : `$${props.type}`;
    });
    const variantProps = computed(() => {
      var _a;
      return {
        color: (_a = props.color) != null ? _a : props.type,
        variant: props.variant
      };
    });
    const {
      themeClasses
    } = provideTheme(props);
    const {
      colorClasses,
      colorStyles,
      variantClasses
    } = useVariant(variantProps);
    const {
      densityClasses
    } = useDensity(props);
    const {
      dimensionStyles
    } = useDimension(props);
    const {
      elevationClasses
    } = useElevation(props);
    const {
      locationStyles
    } = useLocation(props);
    const {
      positionClasses
    } = usePosition(props);
    const {
      roundedClasses
    } = useRounded(props);
    const {
      textColorClasses,
      textColorStyles
    } = useTextColor(toRef(props, "borderColor"));
    const {
      t
    } = useLocale();
    const closeProps = computed(() => ({
      "aria-label": t(props.closeLabel),
      onClick(e) {
        isActive.value = false;
      }
    }));
    return () => {
      var _slots$default, _slots$close;
      const hasPrepend = !!(slots.prepend || icon.value);
      const hasTitle = !!(slots.title || props.title);
      const hasText = !!(props.text || slots.text);
      const hasClose = !!(slots.close || props.closable);
      return isActive.value && createVNode(props.tag, {
        "class": ["v-alert", props.border && {
          "v-alert--border": !!props.border,
          [`v-alert--border-${props.border === true ? "start" : props.border}`]: true
        }, {
          "v-alert--prominent": props.prominent
        }, themeClasses.value, colorClasses.value, densityClasses.value, elevationClasses.value, positionClasses.value, roundedClasses.value, variantClasses.value],
        "style": [colorStyles.value, dimensionStyles.value, locationStyles.value],
        "role": "alert"
      }, {
        default: () => [genOverlays(false, "v-alert"), props.border && createVNode("div", {
          "key": "border",
          "class": ["v-alert__border", textColorClasses.value],
          "style": textColorStyles.value
        }, null), hasPrepend && createVNode(VDefaultsProvider, {
          "key": "prepend",
          "defaults": {
            VIcon: {
              density: props.density,
              icon: icon.value,
              size: props.prominent ? 44 : 28
            }
          }
        }, {
          default: () => [createVNode("div", {
            "class": "v-alert__prepend"
          }, [slots.prepend ? slots.prepend() : icon.value && createVNode(VIcon, null, null)])]
        }), createVNode("div", {
          "class": "v-alert__content"
        }, [hasTitle && createVNode(VAlertTitle, {
          "key": "title"
        }, {
          default: () => [slots.title ? slots.title() : props.title]
        }), hasText && (slots.text ? slots.text() : props.text), (_slots$default = slots.default) == null ? void 0 : _slots$default.call(slots)]), slots.append && createVNode("div", {
          "key": "append",
          "class": "v-alert__append"
        }, [slots.append()]), hasClose && createVNode(VDefaultsProvider, {
          "key": "close",
          "defaults": {
            VBtn: {
              icon: props.closeIcon,
              size: "x-small",
              variant: "text"
            }
          }
        }, {
          default: () => {
            var _a;
            return [createVNode("div", {
              "class": "v-alert__close"
            }, [(_a = (_slots$close = slots.close) == null ? void 0 : _slots$close.call(slots, {
              props: closeProps.value
            })) != null ? _a : createVNode(VBtn, closeProps.value, null)])];
          }
        })]
      });
    };
  }
});
export {
  VAlert,
  VAlertTitle
};
//# sourceMappingURL=vuetify_lib_components_VAlert_index__mjs.js.map
